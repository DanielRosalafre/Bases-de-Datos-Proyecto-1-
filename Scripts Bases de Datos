-- Tabla Cliente
CREATE TABLE Cliente (
    IdCliente INTEGER PRIMARY KEY,
    NombreCliente VARCHAR(100) NOT NULL,
    DireccionCliente VARCHAR(200),
    TelefonoCliente VARCHAR(15),
    CorreoCliente VARCHAR(100),
    NitCliente VARCHAR(20),
    CuiCliente VARCHAR(20),
    SeguroMedicoCliente VARCHAR(50) CHECK(SeguroMedicoCliente IN('Si','No')),
    NumeroPolizaCliente VARCHAR(50)
);

-- Tabla CategoriaProducto
CREATE TABLE CategoriaProducto (
    IdCategoriaProducto INTEGER PRIMARY KEY,
    NombreCategoria VARCHAR(100) NOT NULL
);

-- Tabla Proveedor
CREATE TABLE Proveedor (
    IdProveedor INTEGER PRIMARY KEY,
    NombreProveedor VARCHAR(100) NOT NULL,
    DireccionProveedor VARCHAR(200),
    TelefonoProveedor VARCHAR(15),
    CorreoProveedor VARCHAR(100)
);

-- Tabla Producto
CREATE TABLE Producto (
    IdProducto INTEGER PRIMARY KEY,
    CodigoProducto VARCHAR(50) UNIQUE NOT NULL,
    DescripcionProducto VARCHAR(255),
    PrecioCompra DECIMAL(10, 2) NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL, 
    Impuesto DECIMAL(5, 2) NOT NULL,
    NumeroSerie VARCHAR(100),
    StockActual INT, -- Stock actual agregado
    IdCategoriaProducto INT,
    IdProveedor INTEGER,
    FOREIGN KEY (IdCategoriaProducto) REFERENCES CategoriaProducto(IdCategoriaProducto),
    FOREIGN KEY (IdProveedor) REFERENCES Proveedor(IdProveedor)
);

CREATE TABLE MovimientoInventario (
    IdMovimientoInventario INTEGER PRIMARY KEY,
    IdProducto INTEGER,
    FechaMovimiento DATE NOT NULL,
    TipoMovimiento VARCHAR(20) CHECK (TipoMovimiento IN ('Compra', 'Venta', 'Devolucion')) NOT NULL,
    Cantidad INTEGER NOT NULL,
    ValorUnitario DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (IdProducto) REFERENCES Producto(IdProducto)
);

-- Tabla Forma de Pago
CREATE TABLE FormaPago(
    IdFormaPago INTEGER PRIMARY KEY,
    FormaDePago VARCHAR(50) CHECK(FormaDePago IN('Credito','Contado')) NOT NULL
);

-- Tabla Factura
CREATE TABLE Factura (
    IdFactura INTEGER PRIMARY KEY,
    FechaFactura TIMESTAMP NOT NULL,
    IdCliente INTEGER,
    TotalFactura DECIMAL(10, 2) NOT NULL,
    DescuentoFactura DECIMAL(5, 2),
    TotalPagado DECIMAL(10, 2),
    IdFormaPago INTEGER,
    FOREIGN KEY (IdFormaPago) REFERENCES FormaPago(IdFormaPago),
    FOREIGN KEY (IdCliente) REFERENCES Cliente(IdCliente)
);

-- Tabla Venta
CREATE TABLE Venta (
    IdVenta INTEGER PRIMARY KEY,
    FechaHora TIMESTAMP NOT NULL,
    FormaPago VARCHAR(50) CHECK(FormaPago IN('Credito','Contado')) NOT NULL,
    TotalVenta DECIMAL(10, 2),
    IdFactura INTEGER NOT NULL,
    IdCliente INTEGER,
    IdFormaPago INTEGER,
    FOREIGN KEY (IdFormaPago) REFERENCES FormaPago(IdFormaPago),
    FOREIGN KEY (IdCliente) REFERENCES Cliente(IdCliente),
    FOREIGN KEY (IdFactura) REFERENCES Factura(IdFactura)
);

-- Tabla DetalleFactura
CREATE TABLE DetalleFactura (
    IdDetalleFactura INTEGER PRIMARY KEY,
    IdFactura INTEGER,
    IdProducto INTEGER,
    Cantidad INTEGER NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL,
    Subtotal DECIMAL(10, 2) GENERATED ALWAYS AS (Cantidad * PrecioUnitario) VIRTUAL,
    FOREIGN KEY (IdFactura) REFERENCES Factura(IdFactura),
    FOREIGN KEY (IdProducto) REFERENCES Producto(IdProducto)
);

-- Tabla Devolucion
CREATE TABLE Devolucion (
    IdDevolucion INTEGER PRIMARY KEY,
    FechaDevolucion DATE NOT NULL,
    MotivoDevolucion VARCHAR(250),
    IdFactura INTEGER,
    IdProducto INTEGER,
    FOREIGN KEY (IdFactura) REFERENCES Factura(IdFactura),
    FOREIGN KEY (IdProducto) REFERENCES Producto(IdProducto)
);

-- Tabla Cuenta Contable
CREATE TABLE CuentaContable(
    IdCuentaContable INTEGER PRIMARY KEY,
    NombreCuenta VARCHAR(50),
    TipoCuenta VARCHAR(20) CHECK (TipoCuenta IN('Debe','Haber'))
);

-- Tabla de Partida Contable
CREATE TABLE PartidaContable(
    IdPartidaContable INTEGER PRIMARY KEY,
    FechaPartida DATE,
    DescripcionPartida VARCHAR(250),
    TotalDebe DECIMAL(10, 2),
    TotalHaber DECIMAL(10, 2)
);

-- Tabla de Movimientos Contables
CREATE TABLE MovimientoContable(
    IdMovimientoContable INTEGER PRIMARY KEY,
    MontoMovimiento DECIMAL(10, 2),
    TipoMovimiento VARCHAR(10) CHECK (TipoMovimiento IN ('Debe', 'Haber')),
    DescripcionMovimiento VARCHAR(250),
    IdPartidaContable INTEGER,
    IdCuentaContable INTEGER,
    FOREIGN KEY (IdPartidaContable) REFERENCES PartidaContable(IdPartidaContable),
    FOREIGN KEY (IdCuentaContable) REFERENCES CuentaContable(IdCuentaContable)
);

-- Tabla Compra
CREATE TABLE Compra (
    IdCompra INTEGER PRIMARY KEY,
    Fecha DATE NOT NULL,
    NumeroFactura VARCHAR(50) UNIQUE NOT NULL,
    IdProveedor INTEGER,
    FormaPago VARCHAR(50),
    FOREIGN KEY (IdProveedor) REFERENCES Proveedor(IdProveedor)
);

-- Tabla DetalleCompra
CREATE TABLE DetalleCompra (
    IdDetalleCompra INTEGER PRIMARY KEY,
    IdCompra INT,
    IdProducto INT,
    Cantidad INT NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (IdCompra) REFERENCES Compra(IdCompra),
    FOREIGN KEY (IdProducto) REFERENCES Producto(IdProducto)
);

-- Tabla Gasto
CREATE TABLE Gasto (
    IdGasto INTEGER PRIMARY KEY,
    DescripcionGasto VARCHAR(255),
    MontoGasto DECIMAL(10, 2) NOT NULL,
    FechaGasto DATE NOT NULL,
    IdCuentaContable INTEGER,
    FOREIGN KEY (IdCuentaContable) REFERENCES CuentaContable(IdCuentaContable)
);

-- Tabla Banco
CREATE TABLE Banco (
    IdBanco INTEGER PRIMARY KEY,
    NombreBanco VARCHAR(100) NOT NULL
);

-- Tabla MovimientoBancario
CREATE TABLE MovimientoBancario (
    IdMovimientoBancario INTEGER PRIMARY KEY,
    IdBanco INTEGER,
    FechaMovimiento DATE,
    MontoMovimiento DECIMAL(10, 2),
    DescripcionMovimiento VARCHAR(255),
    FOREIGN KEY (IdBanco) REFERENCES Banco(IdBanco)
);

-- Tabla Cuenta por Cobrar
CREATE TABLE CuentaPorCobrar (
    IdCuentaPorCobrar INTEGER PRIMARY KEY,
    IdCliente INTEGER,
    MontoPendiente DECIMAL(10, 2),
    FechaVencimiento DATE,
    FOREIGN KEY (IdCliente) REFERENCES Cliente(IdCliente)
);

-- Tabla Cuenta por Pagar
CREATE TABLE CuentaPorPagar (
    IdCuentaPorPagar INTEGER PRIMARY KEY,
    IdProveedor INTEGER,
    MontoPendiente DECIMAL(10, 2),
    FechaVencimiento DATE,
    FOREIGN KEY (IdProveedor) REFERENCES Proveedor(IdProveedor)
);

--Tabla Inventario
CREATE TABLE Inventario (
    IdInventario INTEGER PRIMARY KEY,
    IdProducto INTEGER,
    FechaMovimiento DATE NOT NULL,
    TipoMovimiento VARCHAR(20) CHECK (TipoMovimiento IN ('Compra', 'Venta', 'Devolucion')) NOT NULL,
    Cantidad INTEGER NOT NULL,
    MotivoMovimiento VARCHAR(250) NOT NULL,
    IdCompra INTEGER, 
    IdVenta INTEGER, 
    IdDevolucion INTEGER,
    FOREIGN KEY (IdProducto) REFERENCES Producto(IdProducto),
    FOREIGN KEY (IdCompra) REFERENCES Compra(IdCompra),
    FOREIGN KEY (IdVenta) REFERENCES Venta(IdVenta),
    FOREIGN KEY (IdDevolucion) REFERENCES Devolucion(IdDevolucion)
);

CREATE SEQUENCE Venta_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PartidaContable_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE MovimientoContable_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE Inventario_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_insert_venta
AFTER INSERT ON Factura
FOR EACH ROW
BEGIN
    -- Insertamos una nueva venta cuando se crea una factura
    INSERT INTO Venta (
        IdVenta, 
        FechaHora, 
        FormaPago, 
        TotalVenta, 
        IdFactura, 
        IdCliente, 
        IdFormaPago
    ) 
    VALUES (
        Venta_seq.NEXTVAL, 
        :NEW.FechaFactura, 
        (SELECT FormaDePago FROM FormaPago WHERE IdFormaPago = :NEW.IdFormaPago),
        :NEW.TotalFactura - (:NEW.TotalFactura * 0.12), -- Total sin impuestos
        :NEW.IdFactura, 
        :NEW.IdCliente, 
        :NEW.IdFormaPago
    );

    -- Insertamos la partida contable
    INSERT INTO PartidaContable (
        IdPartidaContable, 
        FechaPartida, 
        DescripcionPartida, 
        TotalDebe, 
        TotalHaber
    ) 
    VALUES (
        PartidaContable_seq.NEXTVAL, 
        :NEW.FechaFactura, 
        CASE WHEN (SELECT FormaDePago FROM FormaPago WHERE IdFormaPago = :NEW.IdFormaPago) = 'Contado' THEN 'Venta al contado' ELSE 'Venta a cr√©dito' END, 
        :NEW.TotalFactura, 
        :NEW.TotalFactura
    );

    -- Insertar los 3 movimientos contables correspondientes a la venta
    -- 1. Movimiento contable "Caja" (Debe)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.TotalFactura, 
        'Debe', 
        'Caja', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Caja')
    );

    -- 2. Movimiento contable "Ventas" (Haber)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.TotalFactura - (:NEW.TotalFactura * 0.12), 
        'Haber', 
        'Ventas', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Ventas')
    );

    -- 3. Movimiento contable "IVA por Pagar" (Haber)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.TotalFactura * 0.12, 
        'Haber', 
        'IVA por Pagar', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'IVA por Pagar')
    );
END;
/

CREATE OR REPLACE TRIGGER trg_insert_compra
AFTER INSERT ON Compra
FOR EACH ROW
BEGIN
    -- Insertamos la partida contable
    INSERT INTO PartidaContable (
        IdPartidaContable, 
        FechaPartida, 
        DescripcionPartida, 
        TotalDebe, 
        TotalHaber
    ) 
    VALUES (
        PartidaContable_seq.NEXTVAL, 
        :NEW.Fecha, 
        'Compra', 
        :NEW.TotalCompra, 
        :NEW.TotalCompra
    );

    -- Insertar los 3 movimientos contables correspondientes a la compra
    -- 1. Movimiento contable "Compras" (Debe)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.TotalCompra - (:NEW.TotalCompra * 0.12), 
        'Debe', 
        'Compras', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Compras')
    );

    -- 2. Movimiento contable "IVA por Cobrar" (Debe)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.TotalCompra * 0.12, 
        'Debe', 
        'IVA por Cobrar', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'IVA por Cobrar')
    );

    -- 3. Movimiento contable "Caja" (Haber)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.TotalCompra, 
        'Haber', 
        'Caja', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Caja')
    );
END;
/

CREATE OR REPLACE TRIGGER trg_insert_gasto
AFTER INSERT ON Gasto
FOR EACH ROW
BEGIN
    -- Insertar la partida contable
    INSERT INTO PartidaContable (
        IdPartidaContable, 
        FechaPartida, 
        DescripcionPartida, 
        TotalDebe, 
        TotalHaber
    ) 
    VALUES (
        PartidaContable_seq.NEXTVAL, 
        :NEW.FechaGasto, 
        :NEW.DescripcionGasto, 
        :NEW.MontoGasto, 
        :NEW.MontoGasto
    );

    -- Insertar los dos movimientos contables
    -- 1. Movimiento contable "Gastos" (Debe)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.MontoGasto, 
        'Debe', 
        'Gastos', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Gastos')
    );

    -- 2. Movimiento contable "Caja" (Haber)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.MontoGasto, 
        'Haber', 
        'Caja', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Caja')
    );
END;
/

CREATE OR REPLACE TRIGGER trg_insert_cuenta_cobrar
AFTER INSERT ON CuentaPorCobrar
FOR EACH ROW
BEGIN
    -- Insertar la partida contable
    INSERT INTO PartidaContable (
        IdPartidaContable, 
        FechaPartida, 
        DescripcionPartida, 
        TotalDebe, 
        TotalHaber
    ) 
    VALUES (
        PartidaContable_seq.NEXTVAL, 
        SYSDATE, 
        'Cuenta por Cobrar', 
        :NEW.MontoPendiente, 
        :NEW.MontoPendiente
    );

    -- Insertar los dos movimientos contables
    -- 1. Movimiento contable "Cuentas por Cobrar" (Debe)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.MontoPendiente, 
        'Debe', 
        'Cuentas por Cobrar', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Cuentas por Cobrar')
    );

    -- 2. Movimiento contable "Clientes" (Haber)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.MontoPendiente, 
        'Haber', 
        'Clientes', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Clientes')
    );
END;
/

CREATE OR REPLACE TRIGGER trg_insert_cuenta_pagar
AFTER INSERT ON CuentaPorPagar
FOR EACH ROW
BEGIN
    -- Insertar la partida contable
    INSERT INTO PartidaContable (
        IdPartidaContable, 
        FechaPartida, 
        DescripcionPartida, 
        TotalDebe, 
        TotalHaber
    ) 
    VALUES (
        PartidaContable_seq.NEXTVAL, 
        SYSDATE, 
        'Cuenta por Pagar', 
        :NEW.MontoPendiente, 
        :NEW.MontoPendiente
    );

    -- Insertar los dos movimientos contables
    -- 1. Movimiento contable "Proveedores" (Debe)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.MontoPendiente, 
        'Debe', 
        'Proveedores', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Proveedores')
    );

    -- 2. Movimiento contable "Caja" (Haber)
    INSERT INTO MovimientoContable (
        IdMovimientoContable, 
        MontoMovimiento, 
        TipoMovimiento, 
        DescripcionMovimiento, 
        IdPartidaContable, 
        IdCuentaContable
    ) 
    VALUES (
        MovimientoContable_seq.NEXTVAL, 
        :NEW.MontoPendiente, 
        'Haber', 
        'Caja', 
        PartidaContable_seq.CURRVAL, 
        (SELECT IdCuentaContable FROM CuentaContable WHERE NombreCuenta = 'Caja')
    );
END;
/

CREATE OR REPLACE TRIGGER trg_update_inventario_venta
AFTER INSERT ON DetalleFactura
FOR EACH ROW
BEGIN
    -- Restar la cantidad vendida del stock actual del producto
    UPDATE Producto 
    SET StockActual = StockActual - :NEW.Cantidad
    WHERE IdProducto = :NEW.IdProducto;

    -- Insertar un registro en la tabla de inventario para la venta
    INSERT INTO Inventario (
        IdInventario, 
        IdProducto, 
        FechaMovimiento, 
        TipoMovimiento, 
        Cantidad, 
        MotivoMovimiento, 
        IdVenta
    ) 
    VALUES (
        Inventario_seq.NEXTVAL, 
        :NEW.IdProducto, 
        (SELECT FechaHora FROM Venta WHERE IdVenta = :NEW.IdFactura), -- Usar la fecha de la venta
        'Venta', 
        -:NEW.Cantidad, -- Cantidad negativa porque es una venta (disminuye el stock)
        'Venta de producto', 
        (SELECT IdVenta FROM Venta WHERE IdFactura = :NEW.IdFactura) -- Relacionar con la venta
    );
END;
/

CREATE OR REPLACE TRIGGER trg_update_inventario_devolucion
AFTER INSERT ON Devolucion
FOR EACH ROW
BEGIN
    -- Sumar la cantidad devuelta al stock actual del producto
    UPDATE Producto 
    SET StockActual = StockActual + (SELECT Cantidad FROM DetalleFactura WHERE IdFactura = :NEW.IdFactura AND IdProducto = :NEW.IdProducto)
    WHERE IdProducto = :NEW.IdProducto;

    -- Insertar un registro en la tabla de inventario para la devoluci√≥n
    INSERT INTO Inventario (
        IdInventario, 
        IdProducto, 
        FechaMovimiento, 
        TipoMovimiento, 
        Cantidad, 
        MotivoMovimiento, 
        IdDevolucion
    ) 
    VALUES (
        Inventario_seq.NEXTVAL, 
        :NEW.IdProducto, 
        :NEW.FechaDevolucion, 
        'Devolucion', 
        (SELECT Cantidad FROM DetalleFactura WHERE IdFactura = :NEW.IdFactura AND IdProducto = :NEW.IdProducto), -- Cantidad devuelta
        'Devoluci√≥n de producto', 
        :NEW.IdDevolucion
    );
END;
/

CREATE OR REPLACE TRIGGER trg_update_inventario_compra
AFTER INSERT ON DetalleCompra
FOR EACH ROW
BEGIN
    -- Sumar la cantidad comprada al stock actual del producto
    UPDATE Producto 
    SET StockActual = StockActual + :NEW.Cantidad
    WHERE IdProducto = :NEW.IdProducto;

    -- Insertar un registro en la tabla de inventario para la compra
    INSERT INTO Inventario (
        IdInventario, 
        IdProducto, 
        FechaMovimiento, 
        TipoMovimiento, 
        Cantidad, 
        MotivoMovimiento, 
        IdCompra
    ) 
    VALUES (
        Inventario_seq.NEXTVAL, 
        :NEW.IdProducto, 
        (SELECT Fecha FROM Compra WHERE IdCompra = :NEW.IdCompra), -- Usar la fecha de la compra
        'Compra', 
        :NEW.Cantidad, -- Cantidad comprada (aumenta el stock)
        'Compra de producto', 
        :NEW.IdCompra
    );
END;
/

-- Insertar datos en FormaPago
INSERT INTO FormaPago (IdFormaPago, FormaDePago) VALUES (1, 'Contado');
INSERT INTO FormaPago (IdFormaPago, FormaDePago) VALUES (2, 'Credito');

-- Insertar datos en CategoriaProducto
INSERT INTO CategoriaProducto (IdCategoriaProducto, NombreCategoria) VALUES (1, 'Medicamentos');
INSERT INTO CategoriaProducto (IdCategoriaProducto, NombreCategoria) VALUES (2, 'Suplementos');

-- Insertar datos en Proveedor
INSERT INTO Proveedor (IdProveedor, NombreProveedor, DireccionProveedor, TelefonoProveedor, CorreoProveedor)
VALUES (1, 'Proveedor A', 'Calle Principal #123', '555-1234', 'proveedora@example.com');
INSERT INTO Proveedor (IdProveedor, NombreProveedor, DireccionProveedor, TelefonoProveedor, CorreoProveedor)
VALUES (2, 'Proveedor B', 'Avenida Secundaria #456', '555-5678', 'proveedorb@example.com');

-- Insertar datos en CuentaContable
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (1, 'Caja', 'Debe');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (2, 'Ventas', 'Haber');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (3, 'IVA por Pagar', 'Haber');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (4, 'Compras', 'Debe');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (5, 'IVA por Cobrar', 'Debe');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (6, 'Gastos', 'Debe');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (7, 'Cuentas por Cobrar', 'Debe');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (8, 'Clientes', 'Haber');
INSERT INTO CuentaContable (IdCuentaContable, NombreCuenta, TipoCuenta) VALUES (9, 'Proveedores', 'Debe');

-- Insertar datos en Banco
INSERT INTO Banco (IdBanco, NombreBanco) VALUES (1, 'Banco A');
INSERT INTO Banco (IdBanco, NombreBanco) VALUES (2, 'Banco B');

-- Insertar datos en Cliente
INSERT INTO Cliente (IdCliente, NombreCliente, DireccionCliente, TelefonoCliente, CorreoCliente, NitCliente, CuiCliente, SeguroMedicoCliente, NumeroPolizaCliente)
VALUES (1, 'Juan Perez', 'Calle 1', '555-1234', 'juan.perez@example.com', '1234567', '123456789', 'Si', 'A12345');
INSERT INTO Cliente (IdCliente, NombreCliente, DireccionCliente, TelefonoCliente, CorreoCliente, NitCliente, CuiCliente, SeguroMedicoCliente, NumeroPolizaCliente)
VALUES (2, 'Maria Gomez', 'Avenida 2', '555-5678', 'maria.gomez@example.com', '7654321', '987654321', 'No', '');

-- Insertar datos en Producto
INSERT INTO Producto (IdProducto, CodigoProducto, DescripcionProducto, PrecioCompra, PrecioUnitario, Impuesto, NumeroSerie, StockActual, IdCategoriaProducto, IdProveedor)
VALUES (1, 'MED-001', 'Medicamento A', 50.00, 75.00, 0.12, 'SN123', 100, 1, 1);
INSERT INTO Producto (IdProducto, CodigoProducto, DescripcionProducto, PrecioCompra, PrecioUnitario, Impuesto, NumeroSerie, StockActual, IdCategoriaProducto, IdProveedor)
VALUES (2, 'SUP-002', 'Suplemento B', 30.00, 45.00, 0.12, 'SN456', 200, 2, 2);

-- Insertar datos en Factura
INSERT INTO Factura (IdFactura, FechaFactura, IdCliente, TotalFactura, DescuentoFactura, TotalPagado, IdFormaPago)
VALUES (1, SYSDATE, 1, 150.00, 10.00, 140.00, 1);
INSERT INTO Factura (IdFactura, FechaFactura, IdCliente, TotalFactura, DescuentoFactura, TotalPagado, IdFormaPago)
VALUES (2, SYSDATE, 2, 225.00, 0.00, 225.00, 2);

-- Insertar datos en DetalleFactura
INSERT INTO DetalleFactura (IdDetalleFactura, IdFactura, IdProducto, Cantidad, PrecioUnitario)
VALUES (1, 1, 1, 2, 75.00);
INSERT INTO DetalleFactura (IdDetalleFactura, IdFactura, IdProducto, Cantidad, PrecioUnitario)
VALUES (2, 2, 2, 5, 45.00);


-- Insertar datos en Gasto
INSERT INTO Gasto (IdGasto, DescripcionGasto, MontoGasto, FechaGasto, IdCuentaContable)
VALUES (1, 'Pago de Renta', 500.00, SYSDATE, 6);

-- Insertar datos en CuentaPorCobrar
INSERT INTO CuentaPorCobrar (IdCuentaPorCobrar, IdCliente, MontoPendiente, FechaVencimiento)
VALUES (1, 1, 140.00, SYSDATE + 30);

-- Insertar datos en CuentaPorPagar
INSERT INTO CuentaPorPagar (IdCuentaPorPagar, IdProveedor, MontoPendiente, FechaVencimiento)
VALUES (1, 1, 2500.00, SYSDATE + 30);

-- Insertar datos en MovimientoBancario
INSERT INTO MovimientoBancario (IdMovimientoBancario, IdBanco, FechaMovimiento, MontoMovimiento, DescripcionMovimiento)
VALUES (1, 1, SYSDATE, 5000.00, 'Dep√≥sito inicial');
